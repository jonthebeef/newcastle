name: Security CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # ============================================
  # 1. SECRET SCANNING
  # ============================================
  secret-scan:
    name: Scan for Exposed Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for secret scanning

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified

      - name: GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # 2. DEPENDENCY VULNERABILITY SCANNING
  # ============================================
  dependency-scan:
    name: Scan Dependencies for Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: false

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'lapp-demo'
          path: '.'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports

  # ============================================
  # 3. CODE SECURITY ANALYSIS
  # ============================================
  code-security:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint Security Plugin
        run: |
          npm install --save-dev eslint-plugin-security
          npx eslint . --ext .ts,.tsx --plugin security --rule 'security/detect-object-injection: error'
        continue-on-error: true

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/typescript
            p/react

  # ============================================
  # 4. INJECTION VULNERABILITY TESTS
  # ============================================
  injection-tests:
    name: Test for Injection Vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Check for SQL-like patterns (NoSQL injection)
        run: |
          echo "Scanning for potential injection vectors..."
          ! grep -r "eval(" --include="*.ts" --include="*.tsx" app/ || (echo "Found eval() usage - potential code injection!" && exit 1)
          ! grep -r "dangerouslySetInnerHTML" --include="*.tsx" app/ || (echo "Found dangerouslySetInnerHTML - XSS risk!" && exit 1)
          echo "No obvious injection patterns found"

      - name: TypeScript Strict Mode Check
        run: |
          if ! grep -q '"strict": true' tsconfig.json; then
            echo "TypeScript strict mode not enabled!"
            exit 1
          fi

  # ============================================
  # 5. API SECURITY CHECKS
  # ============================================
  api-security:
    name: API Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for exposed API keys in code
        run: |
          echo "Checking for hardcoded secrets..."
          ! grep -rE "(sk_test_|pk_test_|sk_live_|pk_live_)[A-Za-z0-9]{20,}" --include="*.ts" --include="*.tsx" app/ || (echo "Found hardcoded API keys!" && exit 1)
          ! grep -r "process.env" --include="*.tsx" app/ components/ || (echo "Found process.env in client components!" && exit 1)
          echo "No hardcoded secrets found"

      - name: Validate environment variable usage
        run: |
          echo "Validating env var patterns..."
          grep -r "process.env" app/ | while read line; do
            if echo "$line" | grep -qE "STRIPE_SECRET|CLERK_SECRET"; then
              file=$(echo "$line" | cut -d: -f1)
              if [[ $file == *"app/"*"page.tsx" ]] || [[ $file == *"components/"* ]]; then
                echo "ERROR: Secret env var used in client-side file: $file"
                exit 1
              fi
            fi
          done

  # ============================================
  # 6. BUILD & TYPE SAFETY
  # ============================================
  build-test:
    name: Build & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript Type Check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PRICE_ID: ${{ secrets.STRIPE_PRICE_ID }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          NEXT_PUBLIC_SITE_URL: https://your-production-url.com

      - name: Check build output for secrets
        run: |
          echo "Scanning build output for leaked secrets..."
          ! grep -rE "(sk_test_|pk_test_|sk_live_)[A-Za-z0-9]{20,}" .next/ || (echo "CRITICAL: Secrets found in build!" && exit 1)

  # ============================================
  # 7. LICENSE & COMPLIANCE
  # ============================================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Python-2.0;MPL-2.0'

  # ============================================
  # 8. SECURITY SUMMARY
  # ============================================
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, code-security, injection-tests, api-security, build-test]
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secret Scanning: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency Scan: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Security: ${{ needs.code-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Injection Tests: ${{ needs.injection-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ API Security: ${{ needs.api-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build Test: ${{ needs.build-test.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any security check failed
        if: |
          needs.secret-scan.result == 'failure' ||
          needs.dependency-scan.result == 'failure' ||
          needs.code-security.result == 'failure' ||
          needs.injection-tests.result == 'failure' ||
          needs.api-security.result == 'failure' ||
          needs.build-test.result == 'failure'
        run: |
          echo "❌ Security checks failed!"
          exit 1
